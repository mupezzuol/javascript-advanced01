{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement","Reflect","apply"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAY;;AAEjC;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AACI;AACA,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;AACAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB;AACA,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAnB;AACAD,uCAAWC,KAAX,GAAmB,YAAW;AACxB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACL,6BAFD;AAGH;;AAEDE,gCAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,qBAZD;;AAcAR,gCAAYU,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;AACAd,+BAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAzBM,CAAP;AA0BH;AAnCL;AAAA;AAAA,0CAsCyBpB,UAtCzB,EAsCqC;AAC7BH,uBAAOwB,OAAP,CAAe,iBAAS;AACpB,wBAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CxB,mCAAWyB,iBAAX,CAA6BD,KAA7B;AACH;AACDxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBALD;AAMH;AA7CL;AAAA;AAAA,8CAgD6B;AACrB,oBAAG3B,UAAH,EAAe;AACX4B,4BAAQC,KAAR,CAAc5B,KAAd,EAAqBD,UAArB,EAAiC,EAAjC;AACAA,iCAAa,IAAb;AACH;AACJ;AArDL;;AAAA;AAAA;AAyDH,CAnEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["//Padrão -> Module Pattern\nvar ConnectionFactory = (function () {\n\n    //Vars de conexão, ngm acessa, pois a função anoniam retorna somente a classe\n    const stores = ['negociacoes'];\n    const version = 1;\n    const dbName = 'jsavancado';\n\n    var connection = null;\n    var close = null;\n\n    return class ConnectionFactory {\n        //Faço com que não seja possivel instanciar essa classe\n        constructor() {\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\n        }\n\n\n        static getConnection() {\n\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n\n                    //Se não tiver conexão\n                    if(!connection) {\n                        connection = e.target.result;\n                        close = connection.close;\n                        connection.close = function() {\n                              throw new Error('Você não pode fechar diretamente a conexão');\n                        };\n                    }\n\n                    resolve(e.target.result);\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n\n        static _createStores(connection) {\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) {\n                    connection.deleteObjectStore(store);\n                }\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n\n\n        static closeConnection() {\n            if(connection) {\n                Reflect.apply(close, connection, [])\n                connection = null;\n            }\n        }\n\n\n    }\n})();\n"]}