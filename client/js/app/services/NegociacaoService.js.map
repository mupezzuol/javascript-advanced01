{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","NegociacaoController","apagaTodos","listaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["\nclass NegociacaoService {\n\n    constructor() {\n        this.http = new HttpService();\n    }\n\n    //Chamado método GET via AJAX segregado em nossa classe HttpService\n    // Ele retorna uma Promise, portanto eu uso método 'then', ou seja, então faça...\n    // Passo uma Arrow Function pegando o 'resolve' que é meu resultado e criando uma nova negociação e adc na tabela\n    // Faço 'cath' para pegar os erros via 'reject' que pode acontecer nas promise, erros respectivos, \n    obterNegociacoesDaSemana() {\n        return new Promise((resolve, reject) => {\n            this.http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    }\n\n\n    obterNegociacoesDaSemanaAnterior() {\n        return new Promise((resolve, reject) => {\n            this.http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    //console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return new Promise((resolve, reject) => {\n            this.http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    //console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                })\n        });\n    }\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n\n\n    cadastra(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação')\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoController(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações')\n            })\n    }\n\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações')\n            })\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível importar as negociações\");\n            });\n    }\n\n\n}"]}