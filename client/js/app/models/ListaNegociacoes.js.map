{"version":3,"sources":["../../app-es6/models/ListaNegociacoes.js"],"names":["ListaNegociacoes","armadilha","_negociacoes","_armadilha","negociacao","push","concat"],"mappings":";;;;;;IAAMA,gB;AAEF,8BAAYC,SAAZ,EAAsB;AAAA;;AAClB,aAAKC,YAAL,GAAoB,EAApB;AACA,aAAKC,UAAL,GAAkBF,SAAlB;AACH;;AAED;;;;;iCACSG,U,EAAW;AAChB,iBAAKF,YAAL,CAAkBG,IAAlB,CAAuBD,UAAvB;AACH;;;kCAEW;AACR,iBAAKF,YAAL,GAAoB,EAApB;AACH;;AAED;;;;4BACiB;AACb;AACA;AACA;AACA,mBAAO,GAAGI,MAAH,CAAU,KAAKJ,YAAf,CAAP;AACH","file":"ListaNegociacoes.js","sourcesContent":["class ListaNegociacoes{\n\n    constructor(armadilha){\n        this._negociacoes = [];\n        this._armadilha = armadilha;\n    }\n\n    //Adc negociacao em nosso array\n    adiciona(negociacao){\n        this._negociacoes.push(negociacao);\n    }\n\n    esvazia()   {\n        this._negociacoes = [];\n    }\n\n    //Getter's\n    get negociacoes(){\n        //Vamos usar programção defensica para blindarmos nossas negociacoes, para que ninguem consiga fazer nem 'length =0' ou 'push()'\n        //Criamos um array vazio e chamamos o método 'concat' que retorna um novo objeto, como se fosse uma cópia, porém retornamos a lista que o cara quer usando concat\n        //Retornamos somente uma cópia pro client, o veradeiro permanece intacto\n        return [].concat(this._negociacoes);\n    }\n\n}"]}